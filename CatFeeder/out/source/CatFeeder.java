/* autogenerated by Processing revision 1283 on 2022-06-02 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class CatFeeder extends PApplet {

private static final int nrButtons = 6;

Button[] nrBtn = new Button[nrButtons];

Button lock, food;
String errorMsg = "";

//Data
boolean catInside = true;
boolean catFeed = false;
int downPor = 0;
int temp = 0;
int time = 7;
int foodLeft = 0;
boolean doorloked = false;

 public void setup(){
  /* size commented out by preprocessor */;

  loadButtons();
}

 public void loadButtons(){
  int c = color(200, 255, 200);
  //cat home button
  nrBtn[0] = new Button(700,200,50,50,c);
  nrBtn[0].addIcons("Icons/CatHome.png","Icons/CatOute.png");
  //change temp button
  nrBtn[1] = new Button(700,300,50,50,"°C+",c);
  nrBtn[2] = new Button(700,360,50,50,"°C-",c);
  //change down por
  nrBtn[3] = new Button(700,460,50,50,"mm+",c);
  nrBtn[4] = new Button(700,520,50,50,"mm-",c);
  //cange time
  nrBtn[5] = new Button(700,620,50,50,"Time+",c);
  //lock icon
  lock = new Button (700,140,50,50,c);
  lock.addIcons("Icons/unloked.png","Icons/loked.png");
  food = new Button (200,200,300,300,c);
}

 public void draw(){
  handlData();
  drawUi();
}

 public void handlData(){
  door();
  food();
}

 public void food(){
  if(catInside && time > 7 && time < 23 && !catFeed){
    foodLeft = 3;
    catFeed = true;
  }
  if(time == 7 || time == 17){
    catFeed = false;
  }
  if(!catInside){
    foodLeft = 0;
  }
}

 public void door(){
  if(foodLeft < 2 && doorloked){
    doorloked = false;
    lock.changeIcon();
  }
  if((foodLeft > 1 || temp < -10 || downPor > 8) && !doorloked){
    doorloked = true;
    lock.changeIcon();
  }
}

 public void drawUi(){
  food.drawButton();
  background(43,134,195);
  lock.drawButton();
  
  drawFood();

  for(int i = 0; i < nrButtons; i++){
    textSize(15);
    nrBtn[i].drawButton();
  }
  //temp
  fill(200, 255, 200);
  rect(680,260,90,35);
  fill(0);
  textSize(30);
  text("°C = "+ temp,680,290);
  //down por
  fill(200, 255, 200);
  rect(620,420,170,35);
  fill(0);
  textSize(30);
  text("mm Rain = "+downPor,620,450);
  //time
  fill(200, 255, 200);
  rect(680,580,90,35);
  fill(0);
  textSize(30);
  text("T = "+time,690,610);

  fill(0);
  textSize(30);
  text(errorMsg,300,50);
}

 public void drawFood(){
  switch (foodLeft) {
    case 0:
      image (loadImage("Icons/empty.png"), 200, 200, 300, 300);
    break;
    case 1:
      image (loadImage("Icons/onethree.png"), 200, 200, 300, 300);
    break;
    case 2:
      image (loadImage("Icons/twothree.png"), 200, 200, 300, 300);
    break;
    case 3:
      image (loadImage("Icons/Full.png"), 200, 200, 300, 300);
    break;
    default :
      image (loadImage("Icons/Full.png"), 200, 200, 300, 300);
    break;	
  }
}

 public void mouseMoved(){
  //hover-färg på knappar
  for (int i = 0; i < nrButtons; i++){
    if(nrBtn[i].isOver()){
      nrBtn[i].changeCol(color(245,255,245));
    } else {
      nrBtn[i].changeCol();
    }
  }
}

 public void mousePressed(){
  errorMsg = "";

  if(food.isOver() && foodLeft > 0){
    foodLeft--;
  }

  for (int i = 0; i < nrButtons; i++){
    if(nrBtn[i].isOver()){
      switch (i) {
        case 0:
          if(!catInside || !doorloked){
            nrBtn[i].changeIcon();
            catInside = !catInside;
          }
          else{
            errorMsg = "DorLocked";
          }
        break;
        case 1:
          temp++;
        break;
        case 2:
          temp--;
        break;
        case 3:
          downPor++;
        break;
        case 4:
          if(downPor > 0){
            downPor--;
          }
        break;  
        case 5:
          if ( time < 24){
            time++;
          }else{
            time = 1;
          }
      }
    }
  }
}

class Ui{
    
}
class Button {
  // attributes
  int x, y;
  String text;
  int col, colOriginal;
  int ww; // icon width
  int hh; // icon height

  PImage iconOne,iconTwo,curentIcon;

  // method-constructor
  Button(int ix, int iy,int iww, int ihh, String it, int ict) {
    x = ix; // start x (upper left)
    y = iy; // start y (upper left)
    text = ""+it; // text string
    col = ict; // text color
    ww = iww;
    hh = ihh;
    colOriginal = ict;
  }

  Button(int ix, int iy,int iww, int ihh, int ict) {
    x = ix; // start x (upper left)
    y = iy; // start y (upper left)
    ww = iww;
    hh = ihh;
    col = ict;
    colOriginal = ict;
  }

   public void drawButton(){
    fill(col);
    rect(x,y,ww,hh);
    if(text != null){
      fill(0);
      text(text, x+ww/4, y+hh/2);
    }
    if(curentIcon != null){
      image(curentIcon,x,y,ww,hh);
    }
  }

   public boolean isOver() {
    return(mouseX>=x&&mouseX<=x+ww&&mouseY>=y&&mouseY<=y+hh);
  }
   public boolean isOverSounde(float xS,float yS){
    return(xS>=x&&xS<=x+ww&&yS>=y&&yS<=y+hh);
  }

  
   public void addIcons(String iconOne, String iconTwo){
    this.iconOne = loadImage(iconOne);
    curentIcon = this.iconOne;
    this.iconTwo = loadImage(iconTwo);
  }

   public void changeIcon(){
    if(curentIcon.equals(iconOne)){
      curentIcon = iconTwo;
    }else {
      curentIcon = iconOne;
    }
  }

   public void changeCol(int c){
    col = c;
  }

   public void changeCol(){
    col = colOriginal;
  }
}


  public void settings() { size(800, 800); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "CatFeeder" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
