/* autogenerated by Processing revision 1282 on 2022-04-08 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class raknare extends PApplet {

Button[] nrBtn = new Button[10];
int[] btnColorR = new int[10];
int[] btnColorG = new int[10];
int[] btnColorB = new int[10];
Img img;
boolean isRight = true;
boolean paused = false;
float rotateValue = 0.0f;

enum PausedState{
  RIGHT,
  WRONG,
  PAUSED,
  GO
}

PausedState pausedState = PausedState.GO;

 public void setup(){
  /* size commented out by preprocessor */;

  for(int i=0; i<10; i++){
    btnColorR[i] = 200;
    btnColorG[i] = 255;
    btnColorB[i] = 200;
  }
}


 public void draw(){
  play();
  paused();
}

 public void play(){
  if(paused) return;
  drawUi();
  drawButton();
  drawImg();
  img.printImg(img.getNumbOfObjects());
}

 public void paused(){
  if(!paused) return;
    switch (pausedState){
      case RIGHT :
        drawUi();
        fill(0,0,0,50);
        rect(0, 0, 800, 800);
        image(loadImage("Imgs/o.png"),200,150,400,400);
        uppdateRotateValue();
        img.drawWinImg(rotateValue);
        isRight = true;
      break;	
      case WRONG :
        drawUi();
        fill(0,0,0,50);
        rect(0, 0, 800, 800);
        image(loadImage("Imgs/X.png"),200,150,400,400);
        
      break;	
    }

}

 public void uppdateRotateValue(){
 if(rotateValue < 360){
   rotateValue += 0.05f;
 }else{
   rotateValue = 0.05f;
 }
 
}

 public void drawImg(){
  if(!isRight) return; //returns om inte rätt svar har tryckts

  img = new Img();
  isRight = false;
}

 public void drawButton(){
  //text("Hur många ____ finns det?", 400, 60);
  //skriv logik för att fylla i vad som ritas, och fixa formatering

  textSize(50);

  //placera nrknappar
  for (int i = 0; i < 10; i++){
    if (i<5) {
      nrBtn[i] = new Button(165+100*i, 595, str(i+1), color(btnColorR[i],btnColorG[i],btnColorB[i]));
    } else {
      nrBtn[i] = new Button(165+100*(i-5), 685, str(i+1), color(btnColorR[i],btnColorG[i],btnColorB[i]));
    }
  }
}

 public void drawUi(){
  background(200,255,200);
  fill(255,255,255);
  stroke(0,0,0);
  rect(100,575,600,200,10);
  //rect(200,10,400,100,10);
  textAlign(CENTER);
}

 public void mouseMoved(){
  //hover-färg på knappar
  for (int i = 0; i < 10; i++){
    if(nrBtn[i].isOver()){
      btnColorR[i] = 245;
      btnColorB[i] = 245;
    } else {
      btnColorR[i] = 200;
      btnColorB[i] = 200;
    }
  }
}

 public void mousePressed(){
  unPause();
  checkNumber();
  activateButtons();
}

 public void checkNumber(){
  if(pausedState != PausedState.GO)return;
  for (int i = 0; i < 10; i++){
    if(nrBtn[i].isOver()){
      if(i == img.getNumbOfObjects()-1){
        paused = true;
        pausedState = PausedState.RIGHT;
      }else{
        paused = true;
        pausedState = PausedState.WRONG;
      }
    }
  }
}

 public void unPause(){
  paused = false;
  play();
}

 public void activateButtons(){
  if(paused) return;
  pausedState = PausedState.GO;
}
class Img {
    //attributes
    int numbOfObjects; //Numbers of objects showing
    PImage img;

    Img(){
        getImg(); 
        numbOfObjects = (int)random(10) +1;
    }

     public String getImg(){
        int temp = (int)random(6);
        switch (temp) {
            case 0 :
                img = loadImage("Imgs/apple.png");
                return "Apple";
            case 1 :
                img =loadImage("Imgs/Banana.png");
                return "Banan";
            case 2 :
                img =loadImage("Imgs/fish.png");
                return "Fisk";
            case 3 :
                img =loadImage("Imgs/lion.png");
                return "Lejon";
            case 4 :
                img =loadImage("Imgs/Monkey.png");
                return "Apa";
            case 5 :
                img =loadImage("Imgs/sun.png");
                return "Sol";
            default :
                img =loadImage("Imgs/sun.png");
                return "Sol";
        }
    }

     public void imgOne(){
        image(img, 350, 300, 100, 100);
    }

     public void imgTwo(){
        image(img, 300, 350, 100, 100);
        image(img, 400, 250, 100, 100);
    }

     public void imgThree(){
        image(img, 250, 350, 100, 100);
        image(img, 350, 250, 100, 100);
        image(img, 450, 150, 100, 100);
    }

     public void imgFhor(){
        image(img, 250, 350, 100, 100);
        image(img, 250, 150, 100, 100);
        image(img, 450, 150, 100, 100);
        image(img, 450, 350, 100, 100);
    }

     public void imgFive(){
        image(img, 250, 350, 100, 100);
        image(img, 250, 150, 100, 100);
        image(img, 350, 250, 100, 100);
        image(img, 450, 150, 100, 100);
        image(img, 450, 350, 100, 100);
    }

     public void imgSix(){
        image(img, 50, 350, 100, 100);
        image(img, 50, 150, 100, 100);
        image(img, 150, 250, 100, 100);
        image(img, 250, 150, 100, 100);
        image(img, 250, 350, 100, 100);

        image(img, 550, 250, 100, 100);
    }

     public void imgSeven(){
        image(img, 50, 350, 100, 100);
        image(img, 50, 150, 100, 100);
        image(img, 150, 250, 100, 100);
        image(img, 250, 150, 100, 100);
        image(img, 250, 350, 100, 100);

        image(img, 450, 350, 100, 100);
        image(img, 550, 250, 100, 100);
    }

     public void imgEight(){
        image(img, 50, 350, 100, 100);
        image(img, 50, 150, 100, 100);
        image(img, 150, 250, 100, 100);
        image(img, 250, 150, 100, 100);
        image(img, 250, 350, 100, 100);

        image(img, 450, 350, 100, 100);
        image(img, 550, 250, 100, 100);
        image(img, 650, 150, 100, 100);
    }

     public void imgNine(){
        image(img, 50, 350, 100, 100);
        image(img, 50, 150, 100, 100);
        image(img, 150, 250, 100, 100);
        image(img, 250, 150, 100, 100);
        image(img, 250, 350, 100, 100);

        image(img, 450, 350, 100, 100);
        image(img, 450, 150, 100, 100);
        image(img, 650, 150, 100, 100);
        image(img, 650, 350, 100, 100);
    }

     public void imgTen(){
        image(img, 50, 350, 100, 100);
        image(img, 50, 150, 100, 100);
        image(img, 150, 250, 100, 100);
        image(img, 250, 150, 100, 100);
        image(img, 250, 350, 100, 100);

        image(img, 450, 350, 100, 100);
        image(img, 450, 150, 100, 100);
        image(img, 550, 250, 100, 100);
        image(img, 650, 150, 100, 100);
        image(img, 650, 350, 100, 100);
    }

     public void printImg(int i){
        switch (i) {
            case 1 :
                imgOne();
            break;
            case 2 :
                imgTwo();
            break;		
            case 3 :
                imgThree();
            break;	
            case 4 :
                imgFhor();
            break;	
            case 5 :
                imgFive();
            break;	
            case 6 :
                imgSix();
            break;	
            case 7 :
                imgSeven();
            break;	
            case 8 :
                imgEight();
            break;	
            case 9 :
                imgNine();
            break;	
            case 10 :
                imgTen();
            break;	
        }
    }

     public int getNumbOfObjects(){
        return numbOfObjects;
    }
    
     public void drawWinImg(float rotate){
        translate(400, 700);
        rotate(rotate);
        image(img,-100,-100,200,200);
    }
}
class Button {
  // attributes
  int x, y;
  String text;
  int col;
  int ww; // icon width
  int hh; // icon height
  // method-constructor
  Button(int ix, int iy, String it, int ict) {
    x = ix; // start x (upper left)
    y = iy; // start y (upper left)
    text = ""+it; // text string
    col = ict; // text color
    ww = 70;
    hh = 70;
    fill(col);
    rect(x,y,ww,hh);
    fill(0);

    text(text, x+35, y+50);

  }
   public boolean isOver() {
    return(mouseX>=x&&mouseX<=x+ww&&mouseY>=y&&mouseY<=y+hh);
  }
}


  public void settings() { size(800, 800); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "raknare" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
